// Generated by CoffeeScript 1.10.0
(function() {
  var Log, add, config, download, fs, getResolutionCode, grab, https, humanResolutions, install, isValidId, isValidResolution, jsonfile, log, logSettings, persistConfig, request, resolutions, user;

  https = require('https');

  fs = require('fs');

  request = require('request');

  jsonfile = require('jsonfile');

  user = jsonfile.readFileSync('./.pickselacc');

  config = jsonfile.readFileSync('./picksel.json');

  Log = require('log-color-optionaldate');

  logSettings = {
    level: 'debug',
    color: true,
    date: false
  };

  log = new Log(logSettings);

  resolutions = ['previewURL', 'webformatURL', 'largeImageURL', 'fullHDURL', 'imageURL', 'vectorURL'];

  humanResolutions = ['tiny', 'small', 'large', 'hd', 'full', 'vector'];

  isValidId = function(id) {
    return !isNaN(id) && parseInt(id) >= 0;
  };

  isValidResolution = function(res) {
    return humanResolutions.indexOf(res) > -1;
  };

  getResolutionCode = function(res) {
    return humanResolutions.indexOf(res);
  };

  persistConfig = function() {
    var options;
    options = {
      spaces: 4
    };
    return jsonfile.writeFileSync('./picksel.json', config, options);
  };

  download = function(id, resolution, destination) {
    var options, url;
    url = 'https://pixabay.com/api/?key=' + user.apiKey + (resolution > 1 ? '&response_group=high_resolution' : '') + '&id=' + id;
    options = {
      url: url,
      json: true
    };
    return request(options, function(error, response, body) {
      var file, req;
      file = fs.createWriteStream(destination);
      return req = https.get(body.hits[0][resolutions[resolution]], function(res) {
        return res.pipe(file);
      });
    });
  };

  grab = function(image) {
    var path;
    path = './' + config.directory + '/' + image.destination;
    log.info('Installing image with ID ' + image.id + ' at resolution \'' + humanResolutions[image.resolution] + '\' to \'' + path + '\'.');
    return download(image.id, image.resolution, path);
  };

  install = function() {
    var i, image, len, ref, results;
    ref = config.images;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      image = ref[i];
      results.push(grab(image));
    }
    return results;
  };

  add = function(args) {
    var id, image, res;
    id = args[3];
    if (!isValidId) {
      log.error('That ID \'' + id + '\' isn\'t valid.');
      return false;
    }
    res = args[4];
    if (!isValidResolution(res)) {
      log.error('That resolution \'' + res + '\' isn\'t valid.');
      return false;
    }
    image = {
      id: id,
      resolution: getResolutionCode(res),
      destination: args[5]
    };
    config.images.push(image);
    persistConfig();
    return install();
  };

  switch (process.argv[2]) {
    case 'install':
      install();
      break;
    case 'add':
      add(process.argv);
  }

}).call(this);
