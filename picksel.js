// Generated by CoffeeScript 1.10.0
(function() {
  var Log, PROJECT_PATH, Project, USER_PATH, User, add, ask, auth, buildUrl, codeToApiResolution, compareFiles, download, existsFile, fileMove, filedel, fs, grab, help, https, humanResolutionToApiResolution, humanResolutionToCode, init, install, isNumeric, isValidResolutionCode, jsonfile, loadWorkspace, log, logSettings, md5File, mkdir, persist, persistProject, persistUser, project, promptDirectoryCreation, readline, redactApiKey, remove, request, requestJson, user, validateApiKey, validateId, yn;

  USER_PATH = './.pickselacc';

  PROJECT_PATH = './picksel.json';

  https = require('https');

  fs = require('fs');

  request = require('request');

  jsonfile = require('jsonfile');

  existsFile = require('exists-file');

  md5File = require('md5-file');

  filedel = require('filedel');

  fileMove = require('file-move');

  yn = require('yn');

  mkdir = require('mkdir-p');

  readline = require('readline');

  user = null;

  project = null;

  Log = require('log-color-optionaldate');

  logSettings = {
    level: 'debug',
    color: true,
    date: false
  };

  log = new Log(logSettings);

  Project = (function() {
    function Project() {
      this.directory = '';
      this.images = [];
    }

    return Project;

  })();

  User = (function() {
    function User() {
      this.apiKey = '';
    }

    return User;

  })();

  redactApiKey = function(url) {
    return url.replace(user.apiKey, '********');
  };

  ask = function(question, callback) {
    var reader, readlineOptions;
    readlineOptions = {
      input: process.stdin,
      output: process.stdout
    };
    reader = readline.createInterface(readlineOptions);
    return reader.question(question, function(answer) {
      reader.close();
      return callback(answer);
    });
  };

  buildUrl = function(apiKey, id, res) {
    return ("https://pixabay.com/api/?key=" + apiKey) + (res > 1 ? '&response_group=high_resolution' : '') + ("&id=" + id);
  };

  codeToApiResolution = function(code) {
    var resolutions;
    resolutions = ['previewURL', 'webformatURL', 'largeImageURL', 'fullHDURL', 'imageURL', 'vectorURL'];
    return resolutions[code];
  };

  humanResolutionToCode = function(resolution) {
    var humanResolutions;
    humanResolutions = ['tiny', 'small', 'large', 'hd', 'full', 'vector'];
    return humanResolutions.indexOf(resolution);
  };

  isValidResolutionCode = function(resolution) {
    return humanResolutionToCode(resolution) > -1;
  };

  persist = function(filename, obj, callback) {
    var options;
    options = {
      spaces: 4
    };
    return jsonfile.writeFile(filename, obj, options, callback);
  };

  persistProject = function(obj, callback) {
    if (obj) {
      project = obj;
    }
    return persist(PROJECT_PATH, project, callback);
  };

  persistUser = function(obj, callback) {
    if (obj) {
      user = obj;
    }
    return persist(USER_PATH, user, callback);
  };

  compareFiles = function(x, y, callback) {
    return md5File(x, function(err, xHash) {
      if (err) {
        return callback(err, null);
      } else {
        return md5File(y, function(err, yHash) {
          if (err) {
            return callback(err, null);
          } else {
            if (xHash !== yHash) {
              return callback(null, false);
            } else {
              return callback(null, true);
            }
          }
        });
      }
    });
  };

  requestJson = function(url, callback) {
    var options;
    options = {
      url: url,
      json: true
    };
    return request(options, callback);
  };

  download = function(id, resolution, destination) {
    var url;
    url = buildUrl(user.apiKey, id, resolution);
    log.info("Requesting information for image from " + (redactApiKey(url)));
    return requestJson(url, function(error, response, body) {
      var file, req, temp;
      if (!error && response.statusCode === 200) {
        url = body.hits[0][humanResolutionToApiResolution(resolution)];
        log.info("Downloading image file from " + url);
        temp = destination + '.pickseltemp';
        file = fs.createWriteStream(temp);
        return req = https.get(url, function(response) {
          var stream;
          stream = response.pipe(file);
          return stream.on('finish', function() {
            return existsFile(destination, function(err, exists) {
              if (err) {
                return log.error('Couldn\'t access disk for file hash comparison.' + ' Aborting.');
              } else {
                if (exists) {
                  return compareFiles(destination, temp, function(err, identical) {
                    if (err) {
                      return log.error('Couldn\'t compare files. Aborting.');
                    } else {
                      if (identical) {
                        log.info("Asset with ID '" + id + "' already on disk.");
                      } else {
                        log.warning(("Looks like '" + destination + "' has been") + (" modified (MD5 hashes " + tempHash + " !=") + (" " + existingHash + ") so not gonna overwrite it!"));
                      }
                      return filedel(temp);
                    }
                  });
                } else {
                  return fileMove(temp, destination, function(err) {
                    return log.info("Finished installing image with ID '" + id + "'");
                  });
                }
              }
            });
          });
        });
      } else {
        return log.error("Couldn't get information about image with ID '" + id + "'");
      }
    });
  };

  humanResolutionToApiResolution = function(resolution) {
    return codeToApiResolution(humanResolutionToCode(resolution));
  };

  grab = function(image) {
    var path;
    path = "./" + project.directory + "/" + image.destination;
    log.info(("Installing image with ID '" + image.id + "' at resolution") + (" '" + image.resolution + "' to '" + path + "'"));
    return download(image.id, image.resolution, path);
  };

  install = function() {
    var i, image, len, ref, results;
    ref = project.images;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      image = ref[i];
      results.push(grab(image));
    }
    return results;
  };

  isNumeric = function(str) {
    return /^\d+$/.test(str);
  };

  validateId = function(id, callback) {
    var url;
    url = buildUrl(user.apiKey, id, (isNumeric ? 0 : 2));
    return requestJson(url, function(error, response, body) {
      return callback(!error && response.statusCode === 200);
    });
  };

  add = function(args) {
    var destination, id, resolution;
    id = args[3];
    resolution = args[4];
    destination = args[5];
    if (typeof id === 'undefined' || typeof resolution === 'undefined' || typeof destination === 'undefined') {
      return log.error('You didn\'t provide enough arguments! Like this:' + ' \'picksel add <id> <resolution> <destination>\'');
    } else {
      if (isValidResolutionCode(resolution)) {
        return validateId(id, function(success) {
          var image;
          if (success) {
            image = {
              id: id,
              resolution: resolution,
              destination: destination
            };
            project.images.push(image);
            return persistProject(null, function(err) {
              if (err) {
                return log.error('Error writing your project file to disk!');
              } else {
                return log.info("Added image with ID '" + image.id + "' as asset.");
              }
            });
          } else {
            return log.error("That ID " + id + " isn't valid.");
          }
        });
      } else {
        return log.error("That resolution '" + resolution + "' isn't valid.");
      }
    }
  };

  remove = function(args) {
    var filtered, id;
    id = args[3];
    if (typeof id === 'undefined') {
      return log.error('You need to pass in the ID of the image to remove! Like this:' + ' \'picksel remove <id>\'');
    } else {
      filtered = project.images.filter(function(obj) {
        return obj.id !== id;
      });
      if (project.images.length === filtered.length) {
        return log.warning(("Couldn't uninstall image with ID '" + id + "' because it's not") + ' installed in the first place.');
      } else {
        project.images = filtered;
        return persistProject(null, function(err) {
          if (err) {
            return log.error("Error writing your project file to disk!");
          } else {
            return log.info("Image with ID " + id + " uninstalled.");
          }
        });
      }
    }
  };

  loadWorkspace = function(callback) {
    return existsFile(USER_PATH, function(err, exists) {
      if (exists) {
        return jsonfile.readFile(USER_PATH, function(err, userObj) {
          if (err) {
            log.error("Couldn't read your '" + USER_PATH + "' file!");
            return callback(false);
          } else {
            user = userObj;
            return existsFile(PROJECT_PATH, function(err, exists) {
              if (exists) {
                return jsonfile.readFile(PROJECT_PATH, function(err, projObj) {
                  if (err) {
                    log.error("Couldn't read your '" + PROJECT_PATH + "' file!");
                    return callback(false);
                  } else {
                    project = projObj;
                    return callback(true);
                  }
                });
              } else {
                log.error(("Couldn't find your '" + PROJECT_PATH + "' file with all") + ' your dependencies. You should probably run \'picksel' + ' init\' to set one up.');
                return callback(false);
              }
            });
          }
        });
      } else {
        log.error(("Couldn't find your '" + USER_PATH + "' file to get your API key.") + ' You should probably run \'picksel auth\' to set one up.');
        return callback(false);
      }
    });
  };

  promptDirectoryCreation = function(dir, callback) {
    return existsFile(dir, function(err, exists) {
      if (err || exists) {
        return callback(err, exists);
      } else {
        return ask("Doesn't look like the " + dir + " directory exists, create it? (y/n) ", function(answer) {
          if (yn(answer)) {
            return mkdir(dir, function(err) {
              if (err) {
                log.error('Couldn\'t create directory!');
                return callback(err, false);
              } else {
                log.info("Directory created!");
                return callback(err, true);
              }
            });
          } else {
            log.info("Okay, the directory won't be created.");
            return callback(null, false);
          }
        });
      }
    });
  };

  init = function() {
    return existsFile(PROJECT_PATH, function(err, stats) {
      var newProj;
      if (stats) {
        return log.warning('Looks like this project has already been initialized for' + ' Picksel.');
      } else {
        log.info('Let\'s initialize Picksel for this project...');
        newProj = new Project();
        return ask('Relative to the current directory, where would you like to store' + ' assets? ', function(answer) {
          return promptDirectoryCreation(answer, function(err, exists) {
            if (!exists) {
              log.warning(("The " + answer + " directory isn't present on disk. You") + ' won\'t be able to install assets until it is.');
            }
            newProj.directory = answer;
            return persistProject(newProj, function(err) {
              if (err) {
                return log.error('Error writing your project file to disk!');
              } else {
                return log.info(("New file created at '" + PROJECT_PATH + "' for holding") + ' your asset dependencies. Feel free to check this file' + ' in to source control.');
              }
            });
          });
        });
      }
    });
  };

  validateApiKey = function(key, callback) {
    var url;
    url = buildUrl(key, '195893', 0);
    return requestJson(url, function(error, response, body) {
      return callback(!error && response.statusCode === 200);
    });
  };

  auth = function() {
    return existsFile(USER_PATH, function(err, stats) {
      var newUser;
      if (stats) {
        return log.warning('Looks like authentication is already set up for this' + ' project.');
      } else {
        log.info('Let\'s associate a Pixabay account with your local copy of' + ' this project...');
        newUser = new User();
        return ask('What\'s your Pixabay API key? To find it you can log in to the' + ' Pixabay website and visit: https://pixabay.com/api/docs/ ', function(answer) {
          return validateApiKey(answer, function(success) {
            if (success) {
              newUser.apiKey = answer;
              return persistUser(newUser, function(err) {
                if (err) {
                  return log.error('Error writing your user file to disk!');
                } else {
                  return log.info(("New file created at '" + USER_PATH + "' containing") + ' your API key. DON\'T CHECK THIS FILE IN TO SOURCE' + ' CONTROL BECAUSE IT HAS YOUR SECRET API KEY IN IT.');
                }
              });
            } else {
              return log.error("That API key didn't work with Pixabay!");
            }
          });
        });
      }
    });
  };

  help = function() {
    return console.log('Picksel Asset Manager\n' + 'Usage: picksel <command> <args> \n' + 'Commands:\n' + '  help                  Shows usage information for the application\n' + '  init                  Set up this directory for Picksel\n' + '  auth                  Set up authentication with Pixabay\n' + '  install               Installs all assets\n' + '  add <id> <res> <dest> Adds a dependency on an asset\n' + '    id   The (hash) ID of the image to install on Pixabay\n' + '    res  The resolution to install the image at\n' + '         (tiny|small|large|hd|full|vector)\n' + '    dest The file path to install the image to\n' + '  remove <id>           Removes a dependency on an asset\n' + '    id   The (hash) ID of the image to remove from dependencies');
  };

  switch (process.argv[2]) {
    case 'help':
      help();
      break;
    case 'init':
      init();
      break;
    case 'auth':
      auth();
      break;
    default:
      loadWorkspace(function(success) {
        if (success) {
          switch (process.argv[2]) {
            case 'install':
              return install();
            case 'add':
              return add(process.argv);
            case 'remove':
              return remove(process.argv);
          }
        } else {
          return log.error("Couldn't load workspace for above reason. Terminating.");
        }
      });
  }

}).call(this);
